../../../cadastro/files/703/2/003/13114516416_F_20250527_000511.jpg



///*


SELECT * FROM FuncionariosAtualizacao WHERE  `CodigoEmpresa`=2 and `CodigoFilial`='003' and  `CodigoObra`=101





SELECT * FROM `Funcionarios` WHERE  `CodigoEmpresa`=2 and `CodigoFilial`='003'



SELECT * FROM `FuncionariosAtualizacao` WHERE  `CodigoEmpresa`=2 and `CodigoFilial`='003' and  `CodigoObra`=101

SELECT * FROM `Funcionarios` WHERE `CodigoEmpresa`=2 and `CodigoFilial`='003' and CodigoFuncionario=65;



update `FuncionariosAtualizacao` set Atualizar="Sim" WHERE  `CodigoEmpresa`=2 and `CodigoFilial`='003' and  `CodigoObra`=101


update `FuncionariosAtualizacao` set Operacao='I', Atualizar="Sim" WHERE  `CodigoEmpresa`=2 and `CodigoFilial`='003' and  `CodigoObra`=101



update `FuncionariosAtualizacao` set Operacao='A', Atualizar="Sim" WHERE `CodigoEmpresa`=2 and `CodigoFilial`='003' and `CodigoObra`=101;




update `FuncionariosAtualizacao` set Atualizar="Sim" WHERE  `CodigoEmpresa`=2 and `CodigoFilial`='003' and  `CodigoObra`=101






SELECT * FROM `FuncionariosAtualizacao` WHERE  `CodigoObra`=101 and `CodigoEmpresa`=2
SELECT * FROM `FuncionariosAtualizacao`  WHERE  `CodigoEmpresa`=2 and `CodigoFilial`='003'

UPDATE `FuncionariosAtualizacao` SET `Foto` = 'Sim' WHERE `FuncionariosAtualizacao`.`id` = 31;


**/





 new_employee = {
        'autorized': 1,
        'employees_code': 'EMP001',
        'fullname': 'John Doe',
        'rg': '1234567',
        'cpf': '000.000.000-00',
        'controller_code': 'CTRL123',
        'company_join': '2023-01-01',
        'remote_event_code': 'EVT-456',
        'remote_uuid': 'uuid-1234-5678',
        'data_bloqueio_liberacao': '2025-05-26',
        'deleted_at': None,
        'iface': 'Y'
    }

    employee_id = EmployeeDAO.create(new_employee)
    print(f"Employee created with ID: {employee_id}")

    # READ
    employee = EmployeeDAO.read(employee_id)
    print("Employee data:", employee)

    # UPDATE
    updated_fields = {'fullname': 'John Updated', 'cpf': '111.111.111-11'}
    EmployeeDAO.update(employee_id, updated_fields)

    # DELETE
    EmployeeDAO.delete(employee_id)













    /////////////////////


     # CREATE
    new_history = {
        'employees_iface_id': 'iface-123',
        'employees_remote_code': 'remote-456',
        'remote_event_code': 'event-789',
        'remote_uud': 'uuid-xyz',
        'fullname': 'Jane Doe',
        'company_join': '2024-01-01',
        'readding': 'Entrada registrada',
        'recordType': 1,
        'process': datetime.now(),
        'upload': 'N'
    }

    history_id = EmployeesHistoryDAO.create(new_history)
    print(f"History record created with ID: {history_id}")

    # READ
    record = EmployeesHistoryDAO.read(history_id)
    print("History record:", record)

    # UPDATE
    EmployeesHistoryDAO.update(history_id, {'upload': 'Y'})

    # DELETE
    EmployeesHistoryDAO.delete(history_id)





    //////////////////////////////////////




     # CREATE
    new_update = {
        'operacao': 'BLOQUEIO',
        'codigo_funcionario': 'EMP123',
        'data_bloqueio_liberacao': '2025-05-26',
        'hash_64_dig_1': 'abc123hash1...',
        'hash_64_dig_2': 'abc123hash2...',
        'numero_cracha': '987654',
        'codigo_bloqueio': 5,
        'codigoObra': 101,
        'employees_code': 2,
        'deleted_at': None
    }

    update_id = EmployeesUpdateDAO.create(new_update)
    print(f"Update record created with ID: {update_id}")

    # READ
    record = EmployeesUpdateDAO.read(update_id)
    print("Update record:", record)

    # UPDATE
    EmployeesUpdateDAO.update(update_id, {'operacao': 'LIBERACAO', 'codigo_bloqueio': 0})

    # DELETE
    EmployeesUpdateDAO.delete(update_id)





    ////////////////////////////////////





      new_setting = {
        'type': 'system',
        'description': 'Max login attempts',
        'paramets': 'max_attempts=5',
        'json': '{"max_attempts":5}'
    }
    setting_id = SettingsDAO.create(new_setting)
    print(f"Setting created with ID: {setting_id}")

    # READ
    setting = SettingsDAO.read(setting_id)
    print("Setting:", setting)

    # UPDATE
    SettingsDAO.update(setting_id, {'description': 'Maximum login attempts allowed', 'paramets': 'max_attempts=10'})

    # DELETE
    SettingsDAO.delete(setting_id)






/////



   '''
                    if row['Foto'] is not None:
                        file_path=config.get('API', 'file')

                        file_url="{}{}/{}/{}/{}".format(config.get('API', 'file'),
                                                     dir_codes[0],dir_codes[1],dir_codes[2], row['Foto'])


                        try:
                            url = "{}/api/user/face".format(config.get('API', 'iface'))
                            # Dados do formulário (campos de texto)
                            data = {
                                   'id': row['CodigoFuncionario'],
                                   'name': row['NomeCompleto'],
                                   'enabled': 'true',  # ou 'false',
                                   'photo_url': file_url,
                            }

                            response = requests.post(url, data=data)

                            print(response.text)

                        except:
                            pass



                    '''









manager = UserStatusManager("http://127.0.0.1:5000")

# Desativar usuário
print(manager.disable_user(4517))

# Ativar usuário
print(manager.enable_user(4517))


















//Cofig  Leitora Rasp






 iface_dn815.service




   GNU nano 7.2                                                                          /etc/systemd/system/iface_dn815.service

[Unit]
Description=iface de Inicialização
After=network.target

[Service]
ExecStart=/usr/local/bin/iface_dn815.sh
Restart=on-failure
User=root
WorkingDirectory=/usr/local/bin

[Install]
WantedBy=multi-user.target






  GNU nano 7.2                                                                               /usr/local/bin/iface_dn815.sh *
#!/bin/bash
echo "Script iniciado em $(date)" >> /var/log/meuscript.log

cd /home/inforcomp/IFACESDN815/
source .venv/bin/activate

# Inicia o devicebroker em segundo plano
python -m devicebroker --host 0.0.0.0 --port 8002 --webapp-url http://localhost:8000 &

# Inicia o Django (também pode ser deixado em segundo plano, se quiser)
cd /home/inforcomp/IFACESDN815/DjangoExample
export PYTHONPATH=../packages
python manage.py runserver 0.0.0.0:8000 --settings=demosite.settings.development &

# Volta para o diretório e roda rest2.py
cd /home/inforcomp/IFACESDN815/
python rest3.py













